/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2011 Centre Tecnologic de Telecomunicacions de Catalunya (CTTC)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Jaume Nin <jaume.nin@cttc.cat>
 */

#include "ns3/lte-helper.h"
#include "ns3/epc-helper.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/internet-module.h"
#include "ns3/mobility-module.h"
#include "ns3/lte-module.h"
#include "ns3/applications-module.h"
#include "ns3/point-to-point-helper.h"
#include "ns3/config-store.h"
//#include "ns3/gtk-config-store.h"

using namespace ns3;

/**
 * Sample simulation script for LTE+EPC. It instantiates several eNodeB,
 * attaches one UE per eNodeB starts a flow for each UE to  and from a remote host.
 * It also  starts yet another flow between each UE pair.
 */

NS_LOG_COMPONENT_DEFINE ("EpcFirstExample");

static void GenerateTrafficUlControl (Ptr<Socket> socket, InetSocketAddress dstaddr, uint32_t pktSize, Ptr<Node> currVehicle){
  Ptr<MobilityModel> currMobi = currVehicle->GetObject<MobilityModel>();
    std::string Xcoor = std::to_string(currMobi->GetPosition().x);
    std::string Ycoor = std::to_string(currMobi->GetPosition().y);
    std::string conMsgContent = std::to_string(currVehicle->GetId()) + "\t" + Xcoor + "\t" + Ycoor + "\t" + std::to_string(Simulator::Now ().GetSeconds ());
  const char * conMsgContentChar = conMsgContent.c_str();

  socket->Connect (dstaddr);
  Ptr<Packet> p = Create<Packet>((uint8_t *)conMsgContentChar, pktSize);
  socket->Send (p);
  // socket->BindToNetDevice (netdev);
  // socket->SendTo(p, 0, dstaddr);
  // Simulator::Schedule (pktInterval, &GenerateTrafficUlControl, socket, netdev, dstaddr, pktSize, pktContent, pktInterval);
  // NS_LOG_UNCOND ("t" << "\t" << "UlC" << "\t" << Simulator::Now ().GetSeconds () << "\t" << conMsgContent);
}

void ReceivePacketUlControlLte (Ptr<Socket> socket){
  Ptr<Packet> packetSocket;
  while ((packetSocket = socket->Recv ())){
    Address toIpv4;
    socket->GetSockName(toIpv4);
    // uint32_t toNode = socket->GetNode()->GetId();
    // Ipv4Address oToIpv4 = InetSocketAddress::ConvertFrom(toIpv4).GetIpv4();
    uint8_t *packetContentPrt = new uint8_t[packetSocket->GetSize()];
    packetSocket->CopyData(packetContentPrt, packetSocket->GetSize());
    // uint32_t packetContent = packetSocket->CopyData(packetContentPrt, packetSocket->GetSize());
    NS_LOG_UNCOND ("r" << "\t" << "toRH" << "\t" <<Simulator::Now ().GetSeconds () << "\t" << (char *)packetContentPrt);
  }
}

void ReceivePacketUlControlLteToUe (Ptr<Socket> socket){
  Ptr<Packet> packetSocket;
  while ((packetSocket = socket->Recv ())){
    Address toIpv4;
    socket->GetSockName(toIpv4);
    // uint32_t toNode = socket->GetNode()->GetId();
    // Ipv4Address oToIpv4 = InetSocketAddress::ConvertFrom(toIpv4).GetIpv4();
    uint8_t *packetContentPrt = new uint8_t[packetSocket->GetSize()];
    packetSocket->CopyData(packetContentPrt, packetSocket->GetSize());
    // uint32_t packetContent = packetSocket->CopyData(packetContentPrt, packetSocket->GetSize());
    NS_LOG_UNCOND ("r" << "\t" << "toUE" << "\t" <<Simulator::Now ().GetSeconds () << "\t" << packetSocket->GetSize() << "\t" << (char *)packetContentPrt);
  }
}

int
main (int argc, char *argv[])
{

  uint16_t numberOfNodes = 2;
  double simTime = 0.05;
  double distance = 20.0;
  double interPacketInterval = 100;
  bool useCa = true;

  uint32_t conMsgPktSize = 1024; //byte
  double conMsgPktLongInterval = 0.000005; // seconds
  uint32_t conMsgPktIterNum = 60000;
  // double conMsgDelay = 1.3; // seconds
  double conMsgStartTime = 0.0;

  // std::string traceFile ("swsdefine/tracefile/waterlooNS2_10k_600.txt");        // ** import vehicle mobility trace (generated by VISSIM and transformed by parser)


  // Command line arguments
  CommandLine cmd;
  cmd.AddValue("numberOfNodes", "Number of eNodeBs + UE pairs", numberOfNodes);
  cmd.AddValue("simTime", "Total duration of the simulation [s])", simTime);
  cmd.AddValue("distance", "Distance between eNBs [m]", distance);
  cmd.AddValue("interPacketInterval", "Inter packet interval [ms])", interPacketInterval);
  cmd.AddValue("useCa", "Whether to use carrier aggregation.", useCa);
  cmd.Parse(argc, argv);

  Config::SetDefault ("ns3::LteEnbRrc::DefaultTransmissionMode", UintegerValue (2));
  // Config::SetDefault ("ns3::RadioEnvironmentMapHelper::Bandwidth", UintegerValue (255));
  Config::SetDefault ("ns3::LteEnbNetDevice::UlBandwidth", UintegerValue (100));
  Config::SetDefault ("ns3::LteEnbNetDevice::DlBandwidth", UintegerValue (100));
  Config::SetDefault ("ns3::LteRlcUm::MaxTxBufferSize", UintegerValue (10240*2));
  // Config::SetDefault ("ns3::LteAmc::AmcModel", EnumValue (LteAmc::PiroEW2010));
  Config::SetDefault ("ns3::LteEnbNetDevice::UlEarfcn", UintegerValue (20400));
  Config::SetDefault ("ns3::LteEnbNetDevice::DlEarfcn", UintegerValue (2400));


  if (useCa)
   {
     Config::SetDefault ("ns3::LteHelper::UseCa", BooleanValue (useCa));
     Config::SetDefault ("ns3::LteHelper::NumberOfComponentCarriers", UintegerValue (2));
     Config::SetDefault ("ns3::LteHelper::EnbComponentCarrierManager", StringValue ("ns3::RrComponentCarrierManager"));
   }

  Config::SetDefault ("ns3::LteEnbPhy::TxPower", DoubleValue (35.0));
  Config::SetDefault ("ns3::LteUePhy::TxPower", DoubleValue (33.0));
  Config::SetDefault ("ns3::LteUePhy::EnableUplinkPowerControl", BooleanValue (false));
  Config::SetDefault ("ns3::LteEnbRrc::SrsPeriodicity", UintegerValue(160));
  
  
  // Config::SetDefault ("ns3::ComponentCarrier::UlBandwidth", UintegerValue (25));
  // Config::SetDefault ("ns3::ComponentCarrier::DlBandwidth", UintegerValue (25));

  // Config::SetDefault ("ns3::UdpSocket::RcvBufSize", UintegerValue (131072*10));


  

  // ConfigStore inputConfig;
  // inputConfig.ConfigureDefaults();

  // parse again so you can override default values from the command line
  // cmd.Parse(argc, argv);

   // Create a single RemoteHost
  NodeContainer ueNodes;
  NodeContainer enbNodes;
  ueNodes.Create(numberOfNodes);
  enbNodes.Create(1);

  NodeContainer remoteHostContainer;
  remoteHostContainer.Create (1);
  Ptr<Node> remoteHost = remoteHostContainer.Get (0);

  // Install Mobility Model
  // Ns2MobilityHelper ns2 = Ns2MobilityHelper (traceFile);
  // ns2.Install ();

  Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
  for (uint16_t i = 0; i < numberOfNodes; i++)
    {
      positionAlloc->Add (Vector(distance*i + 10, 0, 0));
    }
  // positionAlloc->Add (Vector (1200, 1100, 0));
  positionAlloc->Add (Vector (0, 0, 0));
  MobilityHelper mobility;
  mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
  mobility.SetPositionAllocator(positionAlloc);
  mobility.Install(ueNodes);
  mobility.Install(enbNodes);

  InternetStackHelper internet;
  internet.Install (remoteHostContainer);
  internet.Install (ueNodes);


  Ptr<LteHelper> lteHelper = CreateObject<LteHelper>(); // create lte network
  lteHelper->SetAttribute ("PathlossModel", StringValue ("ns3::LogDistancePropagationLossModel"));
  lteHelper->SetPathlossModelAttribute("Exponent", DoubleValue(3));
  // lteHelper->SetEnbDeviceAttribute("DlBandwidth", UintegerValue(100));
  // lteHelper->SetEnbDeviceAttribute("UlBandwidth", UintegerValue(100));

  Ptr<PointToPointEpcHelper>  epcHelper = CreateObject<PointToPointEpcHelper> ();
  lteHelper->SetEpcHelper (epcHelper);

  Ptr<Node> pgw = epcHelper->GetPgwNode ();
  NodeContainer pgwContainer;
  pgwContainer.Add(pgw);

  // Create the Internet
  PointToPointHelper p2ph;
  p2ph.SetDeviceAttribute ("DataRate", DataRateValue (DataRate ("100Gb/s")));
  p2ph.SetDeviceAttribute ("Mtu", UintegerValue (1500));
  p2ph.SetChannelAttribute ("Delay", TimeValue (Seconds (0.01)));
  NetDeviceContainer internetDevicesLte = p2ph.Install (remoteHostContainer.Get (0), pgw);
  Ipv4AddressHelper ipv4h;
  ipv4h.SetBase ("9.2.0.0", "255.255.255.0");
  Ipv4InterfaceContainer internetIpIfacesLte = ipv4h.Assign (internetDevicesLte);
  // interface 0 is localhost, 1 is the p2p device
  // Ipv4Address remoteHostAddr = internetIpIfacesLte.GetAddress (0);

  Ipv4StaticRoutingHelper ipv4RoutingHelper;
  Ptr<Ipv4StaticRouting> remoteHostStaticRouting = ipv4RoutingHelper.GetStaticRouting (internetIpIfacesLte.Get(0).first); //  remoteHost->GetObject<Ipv4>()
  remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address ("7.0.0.0"), Ipv4Mask ("255.0.0.0"), 1);

  // Install LTE Devices to the nodes
  NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
  NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);

  // Install the IP stack on the UEs
  Ipv4InterfaceContainer ueIpIface;
  ueIpIface = epcHelper->AssignUeIpv4Address (NetDeviceContainer (ueLteDevs));
  // Assign IP address to UEs, and install applications
  for (uint32_t u = 0; u < numberOfNodes; u++){
      // Set the default gateway for the UE
      Ptr<Ipv4StaticRouting> ueStaticRouting = ipv4RoutingHelper.GetStaticRouting (ueIpIface.Get(u).first);
      ueStaticRouting->SetDefaultRoute (epcHelper->GetUeDefaultGatewayAddress (), 1);
      lteHelper->Attach (ueLteDevs.Get(u), enbLteDevs.Get(0));
    }

  // lteHelper->ActivateDedicatedEpsBearer (ueLteDevs, EpsBearer (EpsBearer::NGBR_VIDEO_TCP_DEFAULT), EpcTft::Default ());


  // Ptr<LteHelper> lteHelper = CreateObject<LteHelper> ();
  // lteHelper->SetAttribute ("PathlossModel", StringValue ("ns3::RangePropagationLossModel"));
  // lteHelper->SetPathlossModelAttribute("MaxRange", DoubleValue(1300.0));

  // Ptr<PointToPointEpcHelper>  epcHelper = CreateObject<PointToPointEpcHelper> ();
  // lteHelper->SetEpcHelper (epcHelper);

  // Ptr<Node> pgw = epcHelper->GetPgwNode ();

  // // Create the Internet
  // PointToPointHelper p2ph;
  // p2ph.SetDeviceAttribute ("DataRate", DataRateValue (DataRate ("100Gb/s")));
  // p2ph.SetDeviceAttribute ("Mtu", UintegerValue (1500));
  // p2ph.SetChannelAttribute ("Delay", TimeValue (Seconds (0.010)));
  // NetDeviceContainer internetDevices = p2ph.Install (remoteHost, pgw);
  // Ipv4AddressHelper ipv4h;
  // ipv4h.SetBase ("9.2.0.0", "255.255.255.0");
  // Ipv4InterfaceContainer internetIpIfaces = ipv4h.Assign (internetDevices);
  // // interface 0 is localhost, 1 is the p2p device
  // // Ipv4Address remoteHostAddr = internetIpIfaces.GetAddress (1);

  // Ipv4StaticRoutingHelper ipv4RoutingHelper;
  // Ptr<Ipv4StaticRouting> remoteHostStaticRouting = ipv4RoutingHelper.GetStaticRouting (internetIpIfaces.Get(0).first);
  // remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address ("7.0.0.0"), Ipv4Mask ("255.0.0.0"), 1);




  // // Install LTE Devices to the nodes
  // NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
  // NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);

  // // Install the IP stack on the UEs
  // Ipv4InterfaceContainer ueIpIface;
  // ueIpIface = epcHelper->AssignUeIpv4Address (NetDeviceContainer (ueLteDevs));
  // // Assign IP address to UEs, and install applications
  // for (uint32_t u = 0; u < numberOfNodes; ++u)
  //   {
  //     // Ptr<Node> ueNode = ueNodes.Get (u);
  //     // Set the default gateway for the UE
  //     Ptr<Ipv4StaticRouting> ueStaticRouting = ipv4RoutingHelper.GetStaticRouting (ueIpIface.Get(u).first);
  //     ueStaticRouting->SetDefaultRoute (epcHelper->GetUeDefaultGatewayAddress (), 1);
  //     lteHelper->Attach (ueLteDevs.Get(u), enbLteDevs.Get(0));
  //   }

  // Attach one UE per eNodeB
  // for (uint16_t i = 0; i < numberOfNodes; i++)
  //     {
  //       lteHelper->Attach (ueLteDevs.Get(i), enbLteDevs.Get(0));
  //       // side effect: the default EPS bearer will be activated
  //     }


  // Install and start applications on UEs and remote host
  TypeId tid = TypeId::LookupByName ("ns3::UdpSocketFactory");
  Ptr<Socket> recvSockLteCMsgUl;
  recvSockLteCMsgUl = Socket::CreateSocket (remoteHost, tid);
  InetSocketAddress sockRemoteLteCMsgUl = InetSocketAddress (internetIpIfacesLte.GetAddress (0), 91);
  recvSockLteCMsgUl->Bind (sockRemoteLteCMsgUl);
  recvSockLteCMsgUl->SetRecvCallback (MakeCallback (&ReceivePacketUlControlLte));
  // recvSockLteCMsgUl->SetAttribute(std::string name, const ns3::AttributeValue &value)

  for(uint32_t i=0;i<numberOfNodes;i++){
    Ptr<Socket> sourceSockCMsgUl;
    sourceSockCMsgUl = Socket::CreateSocket (ueNodes.Get(i), tid);
    InetSocketAddress sockRemoteLteCMsgUlUe = InetSocketAddress (ueIpIface.GetAddress (i), 91);
    sourceSockCMsgUl->Bind(sockRemoteLteCMsgUlUe);
    sourceSockCMsgUl->SetRecvCallback (MakeCallback (&ReceivePacketUlControlLteToUe));
    for (uint32_t k=0;k<conMsgPktIterNum;k++){
        // Simulator::Schedule(Seconds (conMsgStartTime + k*conMsgPktLongInterval), &GenerateTrafficUlControl,
                                  // sourceSockCMsgUl, sockRemoteLteCMsgUl, conMsgPktSize, ueNodes.Get(i));
        Simulator::Schedule(Seconds (conMsgStartTime + k*conMsgPktLongInterval), &GenerateTrafficUlControl,
                                  recvSockLteCMsgUl, sockRemoteLteCMsgUlUe, conMsgPktSize, ueNodes.Get(i));
    }
  }


  // lteHelper->EnableTraces ();
  // Uncomment to enable PCAP tracing
  // p2ph.EnablePcapAll("lena-epc-first");
  // p2ph.EnableAscii("lena-epc-first", remoteHostContainer);
  // p2ph.EnableAscii("lena-epc-second", pgwContainer);
  p2ph.EnableAscii("lena-epc-third", enbNodes);
  // lteHelper->EnablePhyTraces();
  // lteHelper->EnableRlcTraces();
  lteHelper->EnablePdcpTraces();
  // p2ph.EnableAscii("lena-epc-second-pwg", epcHelper->GetPgwNode());


  Simulator::Stop(Seconds(simTime));
  Simulator::Run();

  /*GtkConfigStore config;
  config.ConfigureAttributes();*/

  Simulator::Destroy();
  return 0;

}

